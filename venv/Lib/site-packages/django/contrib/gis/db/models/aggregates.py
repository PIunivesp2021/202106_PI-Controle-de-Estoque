from django.contrib.gis.db.models.fields import (
<<<<<<< HEAD
    ExtentField, GeometryCollectionField, GeometryField, LineStringField,
=======
    ExtentField,
    GeometryCollectionField,
    GeometryField,
    LineStringField,
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
)
from django.db.models import Aggregate, Value
from django.utils.functional import cached_property

<<<<<<< HEAD
__all__ = ['Collect', 'Extent', 'Extent3D', 'MakeLine', 'Union']
=======
__all__ = ["Collect", "Extent", "Extent3D", "MakeLine", "Union"]
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76


class GeoAggregate(Aggregate):
    function = None
    is_extent = False

    @cached_property
    def output_field(self):
        return self.output_field_class(self.source_expressions[0].output_field.srid)

    def as_sql(self, compiler, connection, function=None, **extra_context):
        # this will be called again in parent, but it's needed now - before
        # we get the spatial_aggregate_name
        connection.ops.check_expression_support(self)
        return super().as_sql(
            compiler,
            connection,
            function=function or connection.ops.spatial_aggregate_name(self.name),
<<<<<<< HEAD
            **extra_context
=======
            **extra_context,
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
        )

    def as_oracle(self, compiler, connection, **extra_context):
        if not self.is_extent:
<<<<<<< HEAD
            tolerance = self.extra.get('tolerance') or getattr(self, 'tolerance', 0.05)
            clone = self.copy()
            clone.set_source_expressions([
                *self.get_source_expressions(),
                Value(tolerance),
            ])
            template = '%(function)s(SDOAGGRTYPE(%(expressions)s))'
            return clone.as_sql(compiler, connection, template=template, **extra_context)
        return self.as_sql(compiler, connection, **extra_context)

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
        c = super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
        for expr in c.get_source_expressions():
            if not hasattr(expr.field, 'geom_type'):
                raise ValueError('Geospatial aggregates only allowed on geometry fields.')
=======
            tolerance = self.extra.get("tolerance") or getattr(self, "tolerance", 0.05)
            clone = self.copy()
            clone.set_source_expressions(
                [
                    *self.get_source_expressions(),
                    Value(tolerance),
                ]
            )
            template = "%(function)s(SDOAGGRTYPE(%(expressions)s))"
            return clone.as_sql(
                compiler, connection, template=template, **extra_context
            )
        return self.as_sql(compiler, connection, **extra_context)

    def resolve_expression(
        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
    ):
        c = super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
        for expr in c.get_source_expressions():
            if not hasattr(expr.field, "geom_type"):
                raise ValueError(
                    "Geospatial aggregates only allowed on geometry fields."
                )
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
        return c


class Collect(GeoAggregate):
<<<<<<< HEAD
    name = 'Collect'
=======
    name = "Collect"
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
    output_field_class = GeometryCollectionField


class Extent(GeoAggregate):
<<<<<<< HEAD
    name = 'Extent'
    is_extent = '2D'
=======
    name = "Extent"
    is_extent = "2D"
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76

    def __init__(self, expression, **extra):
        super().__init__(expression, output_field=ExtentField(), **extra)

    def convert_value(self, value, expression, connection):
        return connection.ops.convert_extent(value)


class Extent3D(GeoAggregate):
<<<<<<< HEAD
    name = 'Extent3D'
    is_extent = '3D'
=======
    name = "Extent3D"
    is_extent = "3D"
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76

    def __init__(self, expression, **extra):
        super().__init__(expression, output_field=ExtentField(), **extra)

    def convert_value(self, value, expression, connection):
        return connection.ops.convert_extent3d(value)


class MakeLine(GeoAggregate):
<<<<<<< HEAD
    name = 'MakeLine'
=======
    name = "MakeLine"
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
    output_field_class = LineStringField


class Union(GeoAggregate):
<<<<<<< HEAD
    name = 'Union'
=======
    name = "Union"
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
    output_field_class = GeometryField
