from pathlib import Path

from django.dispatch import receiver
from django.template import engines
from django.template.backends.django import DjangoTemplates
from django.utils._os import to_path
<<<<<<< HEAD
from django.utils.autoreload import (
    autoreload_started, file_changed, is_django_path,
)
=======
from django.utils.autoreload import autoreload_started, file_changed, is_django_path
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76


def get_template_directories():
    # Iterate through each template backend and find
    # any template_loader that has a 'get_dirs' method.
    # Collect the directories, filtering out Django templates.
    items = set()
    for backend in engines.all():
        if not isinstance(backend, DjangoTemplates):
            continue

<<<<<<< HEAD
        items.update(Path.cwd() / to_path(dir) for dir in backend.engine.dirs)

        for loader in backend.engine.template_loaders:
            if not hasattr(loader, 'get_dirs'):
=======
        items.update(Path.cwd() / to_path(dir) for dir in backend.engine.dirs if dir)

        for loader in backend.engine.template_loaders:
            if not hasattr(loader, "get_dirs"):
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
                continue
            items.update(
                Path.cwd() / to_path(directory)
                for directory in loader.get_dirs()
<<<<<<< HEAD
                if not is_django_path(directory)
=======
                if directory and not is_django_path(directory)
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
            )
    return items


def reset_loaders():
    for backend in engines.all():
        if not isinstance(backend, DjangoTemplates):
            continue
        for loader in backend.engine.template_loaders:
            loader.reset()


<<<<<<< HEAD
@receiver(autoreload_started, dispatch_uid='template_loaders_watch_changes')
def watch_for_template_changes(sender, **kwargs):
    for directory in get_template_directories():
        sender.watch_dir(directory, '**/*')


@receiver(file_changed, dispatch_uid='template_loaders_file_changed')
=======
@receiver(autoreload_started, dispatch_uid="template_loaders_watch_changes")
def watch_for_template_changes(sender, **kwargs):
    for directory in get_template_directories():
        sender.watch_dir(directory, "**/*")


@receiver(file_changed, dispatch_uid="template_loaders_file_changed")
>>>>>>> 7d5f087c4e99aa85f4ff913899c3075425769d76
def template_changed(sender, file_path, **kwargs):
    for template_dir in get_template_directories():
        if template_dir in file_path.parents:
            reset_loaders()
            return True
